
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class WordCounter {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter text or provide a file to count words:");

        String input = scanner.nextLine();
        if (input.trim().equalsIgnoreCase("file")) {
            System.out.println("Enter the path of the file:");
            String filePath = scanner.nextLine();
            try {
                input = readFile(filePath);
            } catch (IOException e) {
                System.err.println("Error reading the file: " + e.getMessage());
                return;
            }
        }

        String[] words = input.split("[\\s\\p{Punct}]+");

        int wordCount = 0;

        for (String word : words) {
            if (word.length() > 2) {
                wordCount++;
            }
        }

        System.out.println("Total number of words: " + wordCount);

        Map<String, Integer> wordFrequency = getWordFrequency(words);
        System.out.println("Number of unique words: " + wordFrequency.size());
        System.out.println("Word frequency:");
        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

        scanner.close();
    }

    private static String readFile(String filePath) throws IOException {
        File file = new File(filePath);
        if (!file.exists() || !file.isFile()) {
            throw new IOException("Invalid file path");
        }
        return new String(Files.readAllBytes(file.toPath()));
    }

    private static Map<String, Integer> getWordFrequency(String[] words) {
        Map<String, Integer> wordFrequency = new HashMap<>();
        for (String word : words) {
            wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
        }
        return wordFrequency;
    }
}
